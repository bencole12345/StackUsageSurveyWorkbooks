"""Contains code for generating statistics, histograms and CDFs of
the data generated by EscapeAnalysisTool.
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


def plot_stack_allocation_histograms(df):
    """Plots linear and log scale histograms of stack allocations."""

    def compute_log_bins(data, n_bin_boundaries):
        """Computes bins to use for exponentially-distributed data."""

        _min = np.min(data)
        _max = np.max(data)

        log_min = np.log(_min)
        log_max = np.log(_max)

        log_bins = np.linspace(log_min, log_max, num=n_bin_boundaries)
        bins = np.exp(log_bins)
        return bins

    total_allocations = df["TotalStaticallyAllocatedStackMemory"]
    escaping_only = df["TotalStaticallyAllocatedEscapingStackMemory"]

    fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize=(16, 6))

    # =========================================================
    # Normal scale

    _, bins, _ = ax1.hist(
        [total_allocations, escaping_only],
        label=["All allocations", "Escaping allocations"],
    )
    ax1.legend()
    ax1.set_title("Function stack allocation amounts histogram")
    ax1.set(xlabel="Size (Bytes)")
    ax1.set(ylabel="Number of functions")
    ax1.set_xlim(0, bins[-1])

    # ========================================================
    # Log scale

    # Bump 0-size allocations up to 1 to avoid computing log(0)
    total_allocations = np.clip(total_allocations, 1, None)

    # Compute the bins we need (they're linearly distributed in LOG SPACE)
    num_bin_boundaries = len(bins)
    bins = compute_log_bins(total_allocations, num_bin_boundaries)

    # Do the plot
    ax2.hist(
        [total_allocations, escaping_only],
        bins=bins,
        label=["All allocations", "Escaping allocations"],
    )
    ax2.legend()
    ax2.set_xscale("log")
    ax2.set_title("Function stack allocation amounts histogram (log scale)")
    ax2.set(xlabel="Size (Bytes, logarithmic)")
    ax2.set(ylabel="Number of functions")

    plt.show()


def plot_stack_allocation_CDFs(df):
    """Plots linear and log scale CDFs of stack allocations."""

    def get_cumulative_histogram(series):
        """Computes the cumulative histogram of data."""
        N = series.count()
        x = series_sorted = np.sort(series)
        y = np.arange(N) / N
        return x, y

    total_allocations = df["TotalStaticallyAllocatedStackMemory"]
    escaping_only = df["TotalStaticallyAllocatedEscapingStackMemory"]

    x_total, y = get_cumulative_histogram(total_allocations)
    x_escaping = np.sort(escaping_only)
    max_val = x_total[-1]
    x_total = np.append(x_total, max_val)
    x_escaping = np.append(x_escaping, max_val)
    y = np.append(y, 1)

    fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize=(16, 6))

    linear_plot = ax1.plot(x_total, 100 * y, x_escaping, 100 * y)
    ax1.set_title("Function stack allocation amounts CDF")
    ax1.set(xlabel="Size (Bytes)")
    ax1.set(ylabel="Percentage (%)")
    ax1.legend(["All allocations", "Escaping allocations"])

    log_plot = ax2.plot(x_total, 100 * y, x_escaping, 100 * y)
    ax2.set_title("Function stack allocation amounts CDF (log scale)")
    ax2.set(xlabel="Size (Bytes, logarithmic)")
    ax2.set(ylabel="Percentage (%)")
    ax2.set_xscale("log")
    ax2.legend(["All allocations", "Escaping allocations"])

    fig.show()


def print_statistics(df):
    """Prints some statistics about the data."""

    total_allocations = df["TotalStaticallyAllocatedStackMemory"]
    escaping_only = df["TotalStaticallyAllocatedEscapingStackMemory"]

    print(
        f"All allocations:\n"
        f"      Mean: {np.mean(total_allocations):.1f} bytes\n"
        f"    Median: {np.median(total_allocations)} bytes\n"
        f"Escaping allocations only:\n"
        f"      Mean: {np.mean(escaping_only):.1f} bytes\n"
        f"    Median: {np.median(escaping_only)} bytes"
    )
