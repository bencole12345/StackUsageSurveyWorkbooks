"""Contains functions for plotting graphs of the data generated by
EscapeAnalysisTool."""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from .plotting import plot_orders_of_magnitude_histogram, plot_double_cdf
from .util import (
    log_bins,
    order_of_magnitude_bins,
    get_cumulative_histogram,
    format_bytes,
)


WIDTH = 7
HEIGHT = 5


def all_allocations_size_histogram(dataframes, names, xlim=None):
    """Plots a histogram showing the sizes of statically-sized stack memory
    allocations of all functions in the data set."""

    total_allocation_data = [
        df["TotalStaticallyAllocatedStackMemory"].to_numpy() for df in dataframes
    ]

    fig, ax = plt.subplots(figsize=(WIDTH * 2, HEIGHT))

    bucket_naming_func = lambda lower, upper: format_bytes(int(upper))

    plot_orders_of_magnitude_histogram(
        ax, total_allocation_data, names, bucket_naming_func, xlim=xlim
    )

    ax.set_title("Histogram of functions' total stack allocation sizes")
    ax.set_xlabel("Bucket (Bytes)")
    ax.set_ylabel("Density")

    fig.show()


def escaping_allocations_size_histogram(dataframes, names, xlim=None):
    """Plots a histogram showing the sizes of statically-sized stack memory
    allocations that are believed escaping."""
    
    escaping_allocation_data = [
        df["TotalStaticallyAllocatedEscapingStackMemory"].to_numpy()
        for df in dataframes
    ]

    fig, ax = plt.subplots(figsize=(WIDTH * 2, HEIGHT))

    bucket_naming_func = lambda lower, upper: format_bytes(int(upper))

    plot_orders_of_magnitude_histogram(
        ax, escaping_allocation_data, names, bucket_naming_func, xlim=xlim
    )

    ax.set_title("Histogram of functions' escaping stack allocation sizes")
    ax.set_xlabel("Size (Bytes)")
    ax.set_ylabel("Density")

    fig.show()


def stack_allocation_sizes_histogram_and_cdf(df, name, xlim=None):
    """Plots a histogram and CDF for the amount of stack memory allocated by a
    program."""

    total_allocations = df["TotalStaticallyAllocatedStackMemory"]
    escaping_only = df["TotalStaticallyAllocatedEscapingStackMemory"]

    fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize=(WIDTH * 2, HEIGHT))

    # HISTOGRAM ===============================================================

    data = [total_allocations, escaping_only]
    labels = ["All allocations", "Just escaping"]

    bucket_naming_func = lambda lower, upper: format_bytes(int(upper))

    plot_orders_of_magnitude_histogram(
        ax1, data, labels, bucket_naming_func, xlim=xlim, normalise=False
    )
    ax1.set_title("Histogram of functions' allocation sizes in " + name)
    ax1.set_xlabel("Size (Bytes)")
    ax1.set_ylabel("Count")

    # CDF =====================================================================

    plot_double_cdf(ax2, total_allocations, escaping_only, labels)
    ax2.set_title("CDF of functions' allocation sizes in " + name)
    ax2.set(xlabel="Size (Bytes)")
    ax2.set(ylabel="Percentage (%)")
    ax2.set_xscale("log")
    ax2.legend(labels)
    ax2.grid()

    plt.show()


def stack_allocation_counts_histogram_and_cdf(df, name, xlim=None, log_cdf=True):
    """Plots a histogram and CDF for the number of static alloca() calls in a
    program's source code."""

    all_alloca_calls = df["NumAllocaInvocations"]
    escaping_alloca_calls_only = df["NumEscapingAllocaInvocations"]

    fig, ((ax1, ax2)) = plt.subplots(1, 2, figsize=(WIDTH * 2, HEIGHT))

    # HISTOGRAM ===============================================================

    data = [all_alloca_calls, escaping_alloca_calls_only]
    labels = ["All alloca() calls", "Just escaping alloca() calls"]

    bucket_naming_func = lambda lower, upper: str(int(lower)) + "-" + str(int(upper))

    plot_orders_of_magnitude_histogram(
        ax1, data, labels, bucket_naming_func, xlim=xlim, normalise=False
    )
    ax1.set_title("Histogram of functions' counts of alloca() calls in " + name)
    ax1.set_xlabel("Number of alloca() calls")
    ax1.set_ylabel("Count")

    # CDF =====================================================================

    plot_double_cdf(ax2, all_alloca_calls, escaping_alloca_calls_only, labels)
    ax2.set_title("CDF of functions' counts of alloca() calls in " + name)
    ax2.set(xlabel="Size (Bytes)")
    ax2.set(ylabel="Percentage (%)")
    if log_cdf:
        ax2.set_xscale("log")
    ax2.legend(labels)
    ax2.grid()

    plt.show()
